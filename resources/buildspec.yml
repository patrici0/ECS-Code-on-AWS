version: 0.2

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws --version
      - $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - |
        if [ ! -f ./Dockerfile ]; then cd 00-Application; fi
      - docker build -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Writing image definitions file...
      - |
        if $(pwd | grep 00-Application > /dev/null); then cd ..; fi
      - printf '[{"name":"ecs-code-wks-app","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
      - |
        if [ -f resources/ecs-code-app-stack.yml ]; then
          cp resources/ecs-code-app-stack.yml .
          printf '{"Parameters": {"EnvName":"%s","ContainerImage":"%s","DesiredTaskCount":%s }}' $IMAGE_TAG $REPOSITORY_URI:latest $DESIRED_TASK_COUNT > ecs-code-app-stack.config
        fi
artifacts:
    files:
      - imagedefinitions.json
      - ecs-code-app-stack.yml
      - ecs-code-app-stack.config